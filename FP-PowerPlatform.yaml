trigger: none
parameters:
  - name: patchName
    type: string
    default: "-"
    displayName: "Solution Patch Name (if deploying patch)"
  - name: dataFile
    type: string
    default: "-"
    displayName: "Data Migration File (if migrating data)"
  - name: deployPortal
    type: boolean
    default: false
    displayName: "Deploy Power Pages Portal?"
  - name: branchName
    type: string
    default: "main"
    displayName: "Target Branch Name"
  - name: dataFetchXml
    type: string
    default: "-"
    displayName: "FetchXML Query File Path"
  - name: isUpsert
    type: boolean
    default: true
    displayName: "Use Upsert for Data Import"
  - name: isDelete
    type: boolean
    default: false
    displayName: "Delete Records in Target"

variables:
  - group: d365-deployment-vars-dev

pool:
  vmImage: "windows-latest"

stages:
  - stage: Setup
    jobs:
      - job: PrepareTools
        steps:
          - powershell: |
              Write-Host "Configuring environment..."
              Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass

              $toolsPath = "$(Build.ArtifactStagingDirectory)\tools"
              New-Item -ItemType Directory -Force -Path $toolsPath | Out-Null
              Set-Location $toolsPath

              Write-Host "Downloading NuGet..."
              $sourceNugetExe = "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe"
              $targetNugetExe = ".\nuget.exe"
              Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe

              Write-Host "Installing PowerApps CLI..."
              .\nuget.exe install Microsoft.PowerApps.CLI -Version '1.30.6' -O .

              $pacPath = Get-ChildItem -Path . -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName
              if (-not $pacPath) {
                  Write-Error "Failed to find pac.exe"
                  exit 1
              }

              $pacDirectory = Split-Path $pacPath -Parent
              Write-Host "PAC CLI found at: $pacPath"

              $pacToolDir = "$(Build.ArtifactStagingDirectory)\tools\pacTool"
              New-Item -ItemType Directory -Force -Path $pacToolDir | Out-Null
              Copy-Item -Path "$pacDirectory\*" -Destination $pacToolDir -Recurse

              Set-Location $pacToolDir
              .\pac.exe help
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "PAC CLI verification failed"
                  exit 1
              }

              Write-Host "##vso[task.setvariable variable=PacToolPath;isOutput=true]$pacToolDir"
            displayName: "Install PAC CLI"
            name: PackageDownload

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/tools/pacTool"
              artifact: "pac-cli"
              publishLocation: "pipeline"
  - stage: PreChecks
    dependsOn: Setup
    variables:
      PacToolPath: $[ stageDependencies.Setup.PrepareTools.outputs['PackageDownload.PacToolPath'] ]
    jobs:
          - job: ValidateInputs
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: "pac-cli"
                  targetPath: '$(Pipeline.Workspace)\pac-cli'

              - checkout: self
                persistCredentials: true

              - powershell: |
                  git config --global user.email "azure-pipeline@yourorg.com"
                  git config --global user.name "Azure Pipeline"
                displayName: "Configure Git"

              - pwsh: |
                  if ("${{ parameters.dataFile }}" -ne "-") {
                    Write-Host "Validating data file..."
                    $pacPath = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "pac-cli"
                    $pacExe = Get-ChildItem -Path $pacPath -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName
                    
                    & $pacExe auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
                    
                    $conn = Get-PAConnection -ServiceUrl "$(sourceEnvironmentUrl)" -ClientId "$(clientId)" -ClientSecret "$(clientSecret)"
                    $fetchXml = Get-Content "${{ parameters.dataFile }}" | Select-String -Pattern '<fetch.*?>' | Select -First 1
                    $result = Invoke-PAFetchXmlQuery -FetchXml $fetchXml -CountOnly
                    
                    if ($result -gt 5000) {
                      Write-Error "Data export would exceed 5000 records (Found: $result). Pipeline stopped."
                      exit 1
                    }
                    Write-Host "Record count validation passed: $result records found"
                  }
                displayName: "Validate Data Export Size"
                condition: ne('${{ parameters.dataFile }}', '-')

  - stage: ProcessSolutionPatch
    dependsOn: Setup
    variables:
      PacToolPath: $[ stageDependencies.Setup.PrepareTools.outputs['PackageDownload.PacToolPath'] ]
    condition: ne('${{ parameters.patchName }}', '-')
    jobs:
          - job: HandlePatch
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: "pac-cli"
                  targetPath: '$(Pipeline.Workspace)\pac-cli'

              - checkout: self
                persistCredentials: true
              - powershell: |
                  # Initialize PAC path
                  $pacPath = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "pac-cli"
                  $pacExe = Get-ChildItem -Path $pacPath -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName
                  # Configure Git
                  git config --global user.email "azure-pipeline@yourorg.com"
                  git config --global user.name "Azure Pipeline"
                  # Create required directories
                  New-Item -ItemType Directory -Force -Path ".\solutions" | Out-Null
                  $solutionPath = "./solutions/${{ parameters.patchName }}"
                  New-Item -ItemType Directory -Force -Path $solutionPath | Out-Null
                  New-Item -ItemType Directory -Force -Path "./solution-checker-results" | Out-Null

                  # Sanitize solution name for branch

                  $safePatchName = "${{ parameters.patchName }}".Replace(' ', '-').Replace('.', '-')
                  $branchName = "solution/${safePatchName}_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
                  git checkout -b $branchName

                  & $pacExe auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"

                  # Export patch
                  & $pacExe solution export --path "./${{ parameters.patchName }}.zip" --name "${{ parameters.patchName }}" --managed false

                  # Unpack solution
                  & $pacExe solution unpack --zipfile "./${{ parameters.patchName }}.zip" --folder "$solutionPath"

                  # Run solution checker
                  & $pacExe solution check --path "./${{ parameters.patchName }}.zip" --outputDirectory "./solution-checker-results" --errorLevel "High"
                  # Pack as managed
                  & $pacExe solution pack --folder "$solutionPath" --zipfile "./${{ parameters.patchName }}_managed.zip" --managed true
                  # Git operations with proper path handling
                  git add "$solutionPath"
                  git status
                  git commit -m "feat: Update solution ${{ parameters.patchName }} [skip ci]"
                  # Push changes
                  git push origin $branchName
                  if ($LASTEXITCODE -ne 0) {
                      Write-Error "Failed to push changes. Exit code: $LASTEXITCODE"
                      exit 1
                  }
                  # Create PR
                  $url = "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=6.0"
                  $body = @{
                    title = "Solution Update: ${{ parameters.patchName }}"
                    sourceRefName = "refs/heads/$branchName"
                    targetRefName = "refs/heads/${{ parameters.branchName }}"
                    description = "Automated PR for solution update"
                  } | ConvertTo-Json            
                  $headers = @{
                      'Content-Type' = 'application/json'
                      'Authorization' = "Bearer $(System.AccessToken)"
                  }            
                displayName: "Process Solution Patch and Create PR"
              - powershell: |
                  $pacPath = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "pac-cli"
                  $pacExe = Get-ChildItem -Path $pacPath -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName
                  Write-Host "Current directory: $(Get-Location)"
                  Write-Host "Listing all zip files in current directory:"
                  Get-ChildItem -Path . -Filter "*.zip" -Recurse | ForEach-Object {
                      Write-Host "Found zip file: $($_.FullName)"
                  }
                  # Look for the managed solution file
                  $managedSolutionFile = Get-ChildItem -Path . -Filter "*_managed.zip" -Recurse | Select-Object -First 1
                  if ($null -eq $managedSolutionFile) {
                      Write-Error "No managed solution file found in the workspace"
                      exit 1
                  }
                  $fullPath = $managedSolutionFile.FullName
                  Write-Host "Using managed solution file: $fullPath"
                  & $pacExe auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
                  & $pacExe solution import --path "$fullPath" --async false --activate-plugins true --force-overwrite true --publish-changes true
                  if ($LASTEXITCODE -ne 0) {
                      Write-Error "Failed to import solution. Exit code: $LASTEXITCODE"
                      exit 1
                  }
                displayName: 'Import Managed Solution to Target'
              - task: PublishBuildArtifacts@1
                inputs:
                  PathtoPublish: "./solution-checker-results"
                  ArtifactName: "solution-checker-report"
                displayName: "Publish Solution Checker Results"
  - stage: ProcessData
    dependsOn: Setup
    variables:
      PacToolPath: $[ stageDependencies.Setup.PrepareTools.outputs['PackageDownload.PacToolPath'] ]
    condition: ne('${{ parameters.dataFile }}', '-')
    jobs:
      - job: MigrateData
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "pac-cli"
              targetPath: '$(Pipeline.Workspace)\pac-cli'

          - powershell: |
              $pacPath = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "pac-cli"
              $pacExe = Get-ChildItem -Path $pacPath -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName

              & $pacExe auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
              & $pacExe data export --schemaFile "${{ parameters.dataFile }}" --dataFile "./exported-data.zip"

              & $pacExe auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
              & $pacExe data import --dataFile "./exported-data.zip"
            displayName: "Migrate Data"

  - stage: DeployPortal
    dependsOn: Setup
    variables:
      PacToolPath: $[ stageDependencies.Setup.PrepareTools.outputs['PackageDownload.PacToolPath'] ]
    condition: eq('${{ parameters.deployPortal }}', true)
    jobs:
      - job: PortalDeployment
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "pac-cli"
              targetPath: '$(Pipeline.Workspace)\pac-cli'

          - checkout: self
            persistCredentials: true

          - powershell: |
              # Initialize PAC path
              $pacPath = Join-Path -Path "$(Pipeline.Workspace)" -ChildPath "pac-cli"
              $pacExe = Get-ChildItem -Path $pacPath -Recurse -Filter "pac.exe" | Select-Object -First 1 -ExpandProperty FullName

              # Configure Git
              git config --global user.email "azure-pipeline@yourorg.com"
              git config --global user.name "Azure Pipeline"

              # Create required directories
              New-Item -ItemType Directory -Force -Path "./portals/website" | Out-Null
              New-Item -ItemType Directory -Force -Path "./portal-checker-results" | Out-Null

              # Create feature branch for portal
              $portalBranchName = "portal/update_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
              git checkout -b $portalBranchName

              # Download portal from source
              & $pacExe auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"

              $portalPath = "./portals/website"
              & $pacExe paportal download --path $portalPath --excludeTables mspp_sitesetting,adx_sitesetting --overwrite --modelVersion 2

              # Run Portal Checker
              & $pacExe paportal check --path $portalPath --outputDirectory "./portal-checker-results"

              # Git operations
              Write-Host "Committing portal changes..."
              git add "$portalPath"
              git commit -m "feat: Update portal content [skip ci]"

              # Push changes
              git push origin $portalBranchName
              if ($LASTEXITCODE -ne 0) {
                  Write-Error "Failed to push portal changes. Exit code: $LASTEXITCODE"
                  exit 1
              }

              # Create PR for portal changes
              $body = @{
                  title = "Portal Update $(Get-Date -Format 'yyyy-MM-dd')"
                  sourceRefName = "refs/heads/$portalBranchName"
                  targetRefName = "refs/heads/${{ parameters.branchName }}"
                  description = "Automated PR for portal update"
              } | ConvertTo-Json

              $url = "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=6.0"
              $headers = @{
                  'Content-Type' = 'application/json'
                  'Authorization' = "Bearer $(System.AccessToken)"
              }

              Invoke-RestMethod -Uri $url -Method Post -Body $body -Headers $headers

              # Upload to target
              & $pacExe auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
              & $pacExe paportal upload --path $portalPath --modelVersion 2
            displayName: "Deploy Power Pages Portal and Create PR"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "./portal-checker-results"
              ArtifactName: "portal-checker-report"
            displayName: "Publish Portal Checker Results"
