"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/key-did-resolver";
exports.ids = ["vendor-chunks/key-did-resolver"];
exports.modules = {

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/ed25519.js":
/*!**************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/ed25519.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyToDidDoc: () => (/* binding */ keyToDidDoc)\n/* harmony export */ });\n/* harmony import */ var uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays/to-string */ \"(api)/../../packages/agent/node_modules/uint8arrays/dist/src/to-string.js\");\n/* harmony import */ var _stablelib_ed25519__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @stablelib/ed25519 */ \"@stablelib/ed25519\");\n\n\nfunction encodeKey(key) {\n    const bytes = new Uint8Array(key.length + 2);\n    bytes[0] = 0xec;\n    // The multicodec is encoded as a varint so we need to add this.\n    // See js-multicodec for a general implementation\n    bytes[1] = 0x01;\n    bytes.set(key, 2);\n    return `z${(0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(bytes, 'base58btc')}`;\n}\n/**\n * Constructs the document based on the method key\n */ function keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    const x25519PubBytes = (0,_stablelib_ed25519__WEBPACK_IMPORTED_MODULE_1__.convertPublicKeyToX25519)(pubKeyBytes);\n    const x25519KeyId = `${did}#${encodeKey(x25519PubBytes)}`;\n    return {\n        id: did,\n        verificationMethod: [\n            {\n                id: keyId,\n                type: 'Ed25519VerificationKey2018',\n                controller: did,\n                publicKeyBase58: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(pubKeyBytes, 'base58btc')\n            }\n        ],\n        authentication: [\n            keyId\n        ],\n        assertionMethod: [\n            keyId\n        ],\n        capabilityDelegation: [\n            keyId\n        ],\n        capabilityInvocation: [\n            keyId\n        ],\n        keyAgreement: [\n            {\n                id: x25519KeyId,\n                type: 'X25519KeyAgreementKey2019',\n                controller: did,\n                publicKeyBase58: (0,uint8arrays_to_string__WEBPACK_IMPORTED_MODULE_0__.toString)(x25519PubBytes, 'base58btc')\n            }\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9lZDI1NTE5LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUNhO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwrREFBUSxxQkFBcUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYLDJCQUEyQixZQUFZO0FBQ3ZDLHFCQUFxQixJQUFJLEdBQUcsWUFBWTtBQUN4QywyQkFBMkIsNEVBQXdCO0FBQ25ELDJCQUEyQixJQUFJLEdBQUcsMEJBQTBCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtEQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtEQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQHNhYXMvYWRtaW4tcG9ydGFsLy4uLy4uL3BhY2thZ2VzL2FnZW50L25vZGVfbW9kdWxlcy9rZXktZGlkLXJlc29sdmVyL2Rpc3QvZWQyNTUxOS5qcz9jMWZlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvU3RyaW5nIH0gZnJvbSAndWludDhhcnJheXMvdG8tc3RyaW5nJztcbmltcG9ydCB7IGNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOSB9IGZyb20gJ0BzdGFibGVsaWIvZWQyNTUxOSc7XG5mdW5jdGlvbiBlbmNvZGVLZXkoa2V5KSB7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShrZXkubGVuZ3RoICsgMik7XG4gICAgYnl0ZXNbMF0gPSAweGVjO1xuICAgIC8vIFRoZSBtdWx0aWNvZGVjIGlzIGVuY29kZWQgYXMgYSB2YXJpbnQgc28gd2UgbmVlZCB0byBhZGQgdGhpcy5cbiAgICAvLyBTZWUganMtbXVsdGljb2RlYyBmb3IgYSBnZW5lcmFsIGltcGxlbWVudGF0aW9uXG4gICAgYnl0ZXNbMV0gPSAweDAxO1xuICAgIGJ5dGVzLnNldChrZXksIDIpO1xuICAgIHJldHVybiBgeiR7dG9TdHJpbmcoYnl0ZXMsICdiYXNlNThidGMnKX1gO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBkb2N1bWVudCBiYXNlZCBvbiB0aGUgbWV0aG9kIGtleVxuICovIGV4cG9ydCBmdW5jdGlvbiBrZXlUb0RpZERvYyhwdWJLZXlCeXRlcywgZmluZ2VycHJpbnQpIHtcbiAgICBjb25zdCBkaWQgPSBgZGlkOmtleToke2ZpbmdlcnByaW50fWA7XG4gICAgY29uc3Qga2V5SWQgPSBgJHtkaWR9IyR7ZmluZ2VycHJpbnR9YDtcbiAgICBjb25zdCB4MjU1MTlQdWJCeXRlcyA9IGNvbnZlcnRQdWJsaWNLZXlUb1gyNTUxOShwdWJLZXlCeXRlcyk7XG4gICAgY29uc3QgeDI1NTE5S2V5SWQgPSBgJHtkaWR9IyR7ZW5jb2RlS2V5KHgyNTUxOVB1YkJ5dGVzKX1gO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBkaWQsXG4gICAgICAgIHZlcmlmaWNhdGlvbk1ldGhvZDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBrZXlJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnRWQyNTUxOVZlcmlmaWNhdGlvbktleTIwMTgnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRpZCxcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXlCYXNlNTg6IHRvU3RyaW5nKHB1YktleUJ5dGVzLCAnYmFzZTU4YnRjJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYXV0aGVudGljYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGFzc2VydGlvbk1ldGhvZDogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXSxcbiAgICAgICAgY2FwYWJpbGl0eURlbGVnYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGNhcGFiaWxpdHlJbnZvY2F0aW9uOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdLFxuICAgICAgICBrZXlBZ3JlZW1lbnQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogeDI1NTE5S2V5SWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1gyNTUxOUtleUFncmVlbWVudEtleTIwMTknLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRpZCxcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXlCYXNlNTg6IHRvU3RyaW5nKHgyNTUxOVB1YkJ5dGVzLCAnYmFzZTU4YnRjJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/ed25519.js\n");

/***/ }),

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/index.js":
/*!************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/index.js ***!
  \************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getResolver: () => (/* binding */ getResolver)\n/* harmony export */ });\n/* harmony import */ var varint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! varint */ \"varint\");\n/* harmony import */ var multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! multiformats/bases/base58 */ \"(api)/../../packages/agent/node_modules/multiformats/src/bases/base58.js\");\n/* harmony import */ var _secp256k1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./secp256k1.js */ \"(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256k1.js\");\n/* harmony import */ var _ed25519_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ed25519.js */ \"(api)/../../packages/agent/node_modules/key-did-resolver/dist/ed25519.js\");\n/* harmony import */ var _secp256r1_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./secp256r1.js */ \"(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256r1.js\");\n/* harmony import */ var _secp384r1_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./secp384r1.js */ \"(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp384r1.js\");\n/* harmony import */ var _secp521r1_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./secp521r1.js */ \"(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp521r1.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_secp256r1_js__WEBPACK_IMPORTED_MODULE_4__, _secp384r1_js__WEBPACK_IMPORTED_MODULE_5__, _secp521r1_js__WEBPACK_IMPORTED_MODULE_6__]);\n([_secp256r1_js__WEBPACK_IMPORTED_MODULE_4__, _secp384r1_js__WEBPACK_IMPORTED_MODULE_5__, _secp521r1_js__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n/**\n * ## Installation\n * ```\n * $ npm install key-did-resolver\n * ```\n * ### Usage\n * This code includes support for the curves Ed25519, Secp256k1, Secp256r1 (P-256), Secp384r1 (P-384), and Secp521r1 (P-521) which follow the test vectors at:\n * [https://github.com/w3c-ccg/did-method-key/tree/main/test-vectors](https://github.com/w3c-ccg/did-method-key/tree/main/test-vectors)\n *\n * This code has been tested with the following `did:key`[^1] providers:\n * |  Curve              | Repositry                                                      |\n * | ------------------- | -------------------------------------------------------------- |\n * | Ed25519             | https://github.com/ceramicnetwork/js-did/tree/main/packages/key-did-provider-ed25519     |\n * | Secp256k1           | https://github.com/ceramicnetwork/key-did-provider-secp256k1   |\n * | P-256, P-384, P-521 | https://github.com/bshambaugh/did-key-creator                  |\n *\n * Compressed[^2] forms of P-256, P-384, and P-521 are preferred. [^3]\n *\n * [^1]: The syntax of a did:key is `did:key:id`. The did:key `id` is the `base58btc string` representation of the `Uint8Array (byte array)` consisting of the `the multicodec name` followed by `the public key {raw,uncompressed,compressed}`.\n *\n * [^2]: Compressed keys are the X coordinate of the public key with a prefix that depends on the sign of the Y curve coordinate. The prefix is '02' if even and '03' if odd.\n *\n * [^3]: During development there was not yet consensus on using all compressed keys. Support for uncompressed keys with the '04' prefix and\n * raw keys (just the x,y bytes with no prefix) was kept for the P-256 and P-384 curves.\n *\n * ### Code\n * Using with secp256k1 did-key:\n * ```\n * import * as KeyDidResolver from 'key-did-resolver'\n * import {Resolver} from 'did-resolver'\n *\n * const keyDidResolver = KeyDIDResolver.getResolver()\n * console.log(keyDidResolver)\n * const didResolver = new Resolver(keyDidResolver)\n * const doc = await didResolver.resolve('did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8')\n *\n * console.log(doc)\n * console.log(doc.didDocument.verificationMethod)\n * ```\n *\n * ### Output\n * Using with secp256k1 did-key:\n * ```\n * {\n *   didResolutionMetadata: { contentType: 'application/did+json' },\n *   didDocument: {\n *     id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n *     verificationMethod: [ [Object] ],\n *     authentication: [\n *       'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n *     ],\n *     assertionMethod: [\n *       'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n *     ],\n *     capabilityDelegation: [\n *       'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n *     ],\n *     capabilityInvocation: [\n *       'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme'\n *     ]\n *   },\n *   didDocumentMetadata: {}\n * }\n * [\n *   {\n *     id: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme#zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n *     type: 'Secp256k1VerificationKey2018',\n *     controller: 'did:key:zQ3shokFTS3brHcDQrn82RUDfCZESWL1ZdCEJwekUDPQiYBme',\n *     publicKeyBase58: '23o6Sau8NxxzXcgSc3PLcNxrzrZpbLeBn1izfv3jbKhuv'\n *   }\n * ]\n *\n * ```\n *\n * The code for other curves is similar. Changing the did:key string is sufficient.\n *\n * #### code snippet for ed25519\n * ```\n * const doc = await didResolver.resolve('did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8')\n * ```\n *\n * #### code snippet for P-256\n * ```\n * const doc = await didResolver.resolve('did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu')\n * ```\n *\n * #### code snippet for P-384\n * ```\n * const doc = await didResolver.resolve('did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54')\n * ```\n *\n * #### code snippet for P-521\n * ```\n * const doc = await didResolver.resolve('did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t')\n * ```\n * Note: All P-*** curves are compressed\n *\n * The verification method results are slightly different. Here is a sampling:\n *\n * #### did document verificationMethod for ed25519:\n * ```\n * [\n *   {\n *     id: 'did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8#z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8',\n *     type: 'Ed25519VerificationKey2018',\n *     controller: 'did:key:z6MktvqCyLxTsXUH1tUZncNdVeEZ7hNh7npPRbUU27GTrYb8',\n *     publicKeyBase58: 'FUaAP6i2XyyouPds73QneYgZJ86qhua2jaZYBqJSwKok'\n *   }\n * ]\n * ```\n *\n * #### did document verificationMethod for P-256:\n * ```\n * [\n *   {\n *     id: 'did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu#zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu',\n *     type: 'JsonWebKey2020',\n *     controller: 'did:key:zDnaeUKTWUXc1HDpGfKbEK31nKLN19yX5aunFd7VK1CUMeyJu',\n *     publicKeyJwk: {\n *       kty: 'EC',\n *       crv: 'P-256',\n *       x: 'OcPddBMXKURtwbPaZ9SfwEb8vwcvzFufpRwFuXQwf5Y',\n *       y: 'nEA7FjXwRJ8CvUInUeMxIaRDTxUvKysqP2dSGcXZJfY'\n *     }\n *   }\n * ]\n * ```\n *\n * #### did document verificationMethod for P-384:\n * ```\n * [\n *   {\n *     id: 'did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54#z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54',\n *     type: 'JsonWebKey2020',\n *     controller: 'did:key:z82LkvCwHNreneWpsgPEbV3gu1C6NFJEBg4srfJ5gdxEsMGRJUz2sG9FE42shbn2xkZJh54',\n *     publicKeyJwk: {\n *       kty: 'EC',\n *       crv: 'P-384',\n *       x: 'CA-iNoHDg1lL8pvX3d1uvExzVfCz7Rn6tW781Ub8K5MrDf2IMPyL0RTDiaLHC1JT',\n *       y: 'Kpnrn8DkXUD3ge4mFxi-DKr0DYO2KuJdwNBrhzLRtfMa3WFMZBiPKUPfJj8dYNl_'\n *     }\n *   }\n * ]\n * ```\n *\n * #### did document verificationMethod for P-521:\n * ```\n * [\n *   {\n *     id: 'did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t#z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t',\n *     type: 'JsonWebKey2020',\n *     controller: 'did:key:z2J9gcGhudjgwsDLv4qJVM6DysnsjWRS6ggtCsSYpV9TGxd9WGoE1EkPxdvPcqEs7eLsQA985AGXPuqttPP7WJ5Qdiz27U3t',\n *     publicKeyJwk: {\n *       kty: 'EC',\n *       crv: 'P-521',\n *       x: 'ATkofCC8_KAAJ3XSRayyPk8WqF9qahhoQVjbHtzbe5MSaaFiMKBZr-CurF9IcpJD-YYEukPmarSKFpXLtwAdiONT',\n *       y: 'AWuYkJ7iaFhfz_dzFemaBnuq1WFnoZeIha7KpE9benPTX9FQhAoyHY-2qO4IyqGe1XGGtx8eJXvp57xMtUXm2rAH'\n *     }\n *  }\n * ]\n * ```\n *\n * ### Testing\n * Due to problems with parsing JSON with BigInt, tests need to be run with Jest in Serial mode. Use **_npm run test -- --runInBand_** .\n *\n * ### References\n *\n * [Standards for Efficient Cryptography\n * SEC 2: Recommended Elliptic Curve Domain Parameters\n * Certicom Research\n * Contact: Daniel R. L. Brown (dbrown@certicom.com)\n * January 27, 2010\n * Version 2.0 ], http://www.secg.org/sec2-v2.pdf\n *\n *\n * [FIPS PUB 186-4 ,FEDERAL INFORMATION PROCESSING STANDARDS\n * PUBLICATION, Digital Signature Standard (DSS)], https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf\n *\n * [Compact representation of an elliptic curve point, Network Working Group, A.J. Jivsov, March 15, 2014],\n * https://tools.ietf.org/id/draft-jivsov-ecc-compact-05.html\n *\n * @module key-did-resolver\n */ /* eslint-disable  @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-argument */ \n\n\n\n\n\n\nconst DID_LD_JSON = 'application/did+ld+json';\nconst DID_JSON = 'application/did+json';\n// supported drivers\nconst prefixToDriverMap = {\n    0xe7: _secp256k1_js__WEBPACK_IMPORTED_MODULE_2__,\n    0xed: _ed25519_js__WEBPACK_IMPORTED_MODULE_3__,\n    0x1200: _secp256r1_js__WEBPACK_IMPORTED_MODULE_4__,\n    0x1201: _secp384r1_js__WEBPACK_IMPORTED_MODULE_5__,\n    0x1202: _secp521r1_js__WEBPACK_IMPORTED_MODULE_6__\n};\nfunction getResolver() {\n    return {\n        // @ts-ignore\n        key: async (// @ts-ignore\n        did, parsed, // @ts-ignore\n        r, options)=>{\n            const contentType = options.accept || DID_JSON;\n            const response = {\n                didResolutionMetadata: {\n                    contentType\n                },\n                didDocument: null,\n                didDocumentMetadata: {}\n            };\n            try {\n                const multicodecPubKey = multiformats_bases_base58__WEBPACK_IMPORTED_MODULE_1__.base58btc.decode(parsed.id);\n                const keyType = varint__WEBPACK_IMPORTED_MODULE_0__.decode(multicodecPubKey);\n                const pubKeyBytes = multicodecPubKey.slice(varint__WEBPACK_IMPORTED_MODULE_0__.decode.bytes);\n                const doc = await prefixToDriverMap[keyType].keyToDidDoc(pubKeyBytes, parsed.id);\n                if (contentType === DID_LD_JSON) {\n                    doc['@context'] = 'https://w3id.org/did/v1';\n                    response.didDocument = doc;\n                } else if (contentType === DID_JSON) {\n                    response.didDocument = doc;\n                } else {\n                    delete response.didResolutionMetadata.contentType;\n                    response.didResolutionMetadata.error = 'representationNotSupported';\n                }\n            } catch (e) {\n                response.didResolutionMetadata.error = 'invalidDid';\n                // @ts-ignore\n                response.didResolutionMetadata.message = e.toString();\n            }\n            return response;\n        }\n    };\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    getResolver\n});\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/index.js\n");

/***/ }),

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256k1.js":
/*!****************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/secp256k1.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyToDidDoc: () => (/* binding */ keyToDidDoc)\n/* harmony export */ });\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays */ \"(api)/../../packages/agent/node_modules/uint8arrays/dist/src/index.js\");\n\n/**\n * Constructs the document based on the method key\n */ function keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    return {\n        id: did,\n        verificationMethod: [\n            {\n                id: keyId,\n                type: 'Secp256k1VerificationKey2018',\n                controller: did,\n                publicKeyBase58: uint8arrays__WEBPACK_IMPORTED_MODULE_0__.toString(pubKeyBytes, 'base58btc')\n            }\n        ],\n        authentication: [\n            keyId\n        ],\n        assertionMethod: [\n            keyId\n        ],\n        capabilityDelegation: [\n            keyId\n        ],\n        capabilityInvocation: [\n            keyId\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMjU2azEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUM7QUFDbkM7QUFDQTtBQUNBLElBQVc7QUFDWCwyQkFBMkIsWUFBWTtBQUN2QyxxQkFBcUIsSUFBSSxHQUFHLFlBQVk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsaURBQVk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2Fhcy9hZG1pbi1wb3J0YWwvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMjU2azEuanM/ZTk5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1OGEgZnJvbSAndWludDhhcnJheXMnO1xuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBkb2N1bWVudCBiYXNlZCBvbiB0aGUgbWV0aG9kIGtleVxuICovIGV4cG9ydCBmdW5jdGlvbiBrZXlUb0RpZERvYyhwdWJLZXlCeXRlcywgZmluZ2VycHJpbnQpIHtcbiAgICBjb25zdCBkaWQgPSBgZGlkOmtleToke2ZpbmdlcnByaW50fWA7XG4gICAgY29uc3Qga2V5SWQgPSBgJHtkaWR9IyR7ZmluZ2VycHJpbnR9YDtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogZGlkLFxuICAgICAgICB2ZXJpZmljYXRpb25NZXRob2Q6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDoga2V5SWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ1NlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTgnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRpZCxcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXlCYXNlNTg6IHU4YS50b1N0cmluZyhwdWJLZXlCeXRlcywgJ2Jhc2U1OGJ0YycpXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGF1dGhlbnRpY2F0aW9uOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdLFxuICAgICAgICBhc3NlcnRpb25NZXRob2Q6IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGNhcGFiaWxpdHlEZWxlZ2F0aW9uOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdLFxuICAgICAgICBjYXBhYmlsaXR5SW52b2NhdGlvbjogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXVxuICAgIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256k1.js\n");

/***/ }),

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256r1.js":
/*!****************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/secp256r1.js ***!
  \****************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyToDidDoc: () => (/* binding */ keyToDidDoc),\n/* harmony export */   pubKeyBytesToXY: () => (/* binding */ pubKeyBytesToXY)\n/* harmony export */ });\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays */ \"(api)/../../packages/agent/node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nist-weierstrauss */ \"nist-weierstrauss\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__]);\nnist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Brent Shambaugh <brent.shambaugh@gmail.com>. 2021.\n\n\n/**\n * Constructs the document based on the method key\n */ function keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    const key = pubKeyBytesToXY(pubKeyBytes);\n    return {\n        id: did,\n        verificationMethod: [\n            {\n                id: keyId,\n                type: 'JsonWebKey2020',\n                controller: did,\n                publicKeyJwk: {\n                    kty: 'EC',\n                    crv: 'P-256',\n                    x: key.xm,\n                    y: key.ym\n                }\n            }\n        ],\n        authentication: [\n            keyId\n        ],\n        assertionMethod: [\n            keyId\n        ],\n        capabilityDelegation: [\n            keyId\n        ],\n        capabilityInvocation: [\n            keyId\n        ]\n    };\n}\n/**\n *\n * @param pubKeyBytes - public key as uncompressed byte array with no prefix (raw key),\n *  uncompressed with 0x04 prefix, or compressed with 0x02 prefix if even and 0x03 prefix if odd.\n * @returns point x,y with coordinates as multibase encoded base64urls\n *\n * See the the did:key specification: https://w3c-ccg.github.io/did-method-key/#p-256.\n * At present only raw p-256 keys are covered in the specification.\n * @throws TypeError: input cannot be null or undefined.\n * @throws Error: Unexpected pubKeyBytes\n * @internal\n */ function pubKeyBytesToXY(pubKeyBytes) {\n    if (!nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.testUint8Array(pubKeyBytes)) {\n        throw new TypeError('input must be a Uint8Array');\n    }\n    const publicKeyHex = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.pubKeyBytesToHex(pubKeyBytes);\n    const bytesCount = publicKeyHex.length / 2;\n    // raw p-256 key\n    if (bytesCount == 64) {\n        return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyToXY(publicKeyHex);\n    }\n    // uncompressed p-256 key, SEC format\n    if (bytesCount == 65) {\n        if (publicKeyHex.slice(0, 2) == '04') {\n            const publicKey = publicKeyHex.slice(2);\n            return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyToXY(publicKey);\n        }\n    }\n    // compressed p-256 key, SEC format\n    if (bytesCount == 33) {\n        if (publicKeyHex.slice(0, 2) == '03' || publicKeyHex.slice(0, 2) == '02') {\n            const publicKey = uint8arrays__WEBPACK_IMPORTED_MODULE_0__.fromString(publicKeyHex, 'base16');\n            const point = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.secp256r1.ECPointDecompress(publicKey);\n            return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyIntToXY(point);\n        }\n    }\n    throw new Error('Unexpected pubKeyBytes');\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMjU2cjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ21DO0FBQ29CO0FBQ3ZEO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsMkJBQTJCLFlBQVk7QUFDdkMscUJBQXFCLElBQUksR0FBRyxZQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsU0FBUyx1RUFBMEM7QUFDbkQ7QUFDQTtBQUNBLHlCQUF5Qix1RUFBMEM7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1RUFBMEM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1RUFBMEM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtREFBYztBQUM1QywwQkFBMEIsd0RBQTJCO0FBQ3JELG1CQUFtQix1RUFBMEM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2Fhcy9hZG1pbi1wb3J0YWwvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMjU2cjEuanM/ZDJkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCcmVudCBTaGFtYmF1Z2ggPGJyZW50LnNoYW1iYXVnaEBnbWFpbC5jb20+LiAyMDIxLlxuaW1wb3J0ICogYXMgdThhIGZyb20gJ3VpbnQ4YXJyYXlzJztcbmltcG9ydCAqIGFzIG5pc3Rfd2VpZXJzdHJhdXNzIGZyb20gJ25pc3Qtd2VpZXJzdHJhdXNzJztcbi8qKlxuICogQ29uc3RydWN0cyB0aGUgZG9jdW1lbnQgYmFzZWQgb24gdGhlIG1ldGhvZCBrZXlcbiAqLyBleHBvcnQgZnVuY3Rpb24ga2V5VG9EaWREb2MocHViS2V5Qnl0ZXMsIGZpbmdlcnByaW50KSB7XG4gICAgY29uc3QgZGlkID0gYGRpZDprZXk6JHtmaW5nZXJwcmludH1gO1xuICAgIGNvbnN0IGtleUlkID0gYCR7ZGlkfSMke2ZpbmdlcnByaW50fWA7XG4gICAgY29uc3Qga2V5ID0gcHViS2V5Qnl0ZXNUb1hZKHB1YktleUJ5dGVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogZGlkLFxuICAgICAgICB2ZXJpZmljYXRpb25NZXRob2Q6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDoga2V5SWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ0pzb25XZWJLZXkyMDIwJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBkaWQsXG4gICAgICAgICAgICAgICAgcHVibGljS2V5SndrOiB7XG4gICAgICAgICAgICAgICAgICAgIGt0eTogJ0VDJyxcbiAgICAgICAgICAgICAgICAgICAgY3J2OiAnUC0yNTYnLFxuICAgICAgICAgICAgICAgICAgICB4OiBrZXkueG0sXG4gICAgICAgICAgICAgICAgICAgIHk6IGtleS55bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYXV0aGVudGljYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGFzc2VydGlvbk1ldGhvZDogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXSxcbiAgICAgICAgY2FwYWJpbGl0eURlbGVnYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGNhcGFiaWxpdHlJbnZvY2F0aW9uOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdXG4gICAgfTtcbn1cbi8qKlxuICpcbiAqIEBwYXJhbSBwdWJLZXlCeXRlcyAtIHB1YmxpYyBrZXkgYXMgdW5jb21wcmVzc2VkIGJ5dGUgYXJyYXkgd2l0aCBubyBwcmVmaXggKHJhdyBrZXkpLFxuICogIHVuY29tcHJlc3NlZCB3aXRoIDB4MDQgcHJlZml4LCBvciBjb21wcmVzc2VkIHdpdGggMHgwMiBwcmVmaXggaWYgZXZlbiBhbmQgMHgwMyBwcmVmaXggaWYgb2RkLlxuICogQHJldHVybnMgcG9pbnQgeCx5IHdpdGggY29vcmRpbmF0ZXMgYXMgbXVsdGliYXNlIGVuY29kZWQgYmFzZTY0dXJsc1xuICpcbiAqIFNlZSB0aGUgdGhlIGRpZDprZXkgc3BlY2lmaWNhdGlvbjogaHR0cHM6Ly93M2MtY2NnLmdpdGh1Yi5pby9kaWQtbWV0aG9kLWtleS8jcC0yNTYuXG4gKiBBdCBwcmVzZW50IG9ubHkgcmF3IHAtMjU2IGtleXMgYXJlIGNvdmVyZWQgaW4gdGhlIHNwZWNpZmljYXRpb24uXG4gKiBAdGhyb3dzIFR5cGVFcnJvcjogaW5wdXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlxuICogQHRocm93cyBFcnJvcjogVW5leHBlY3RlZCBwdWJLZXlCeXRlc1xuICogQGludGVybmFsXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHB1YktleUJ5dGVzVG9YWShwdWJLZXlCeXRlcykge1xuICAgIGlmICghbmlzdF93ZWllcnN0cmF1c3MubmlzdF93ZWllcnN0cmF1c3NfY29tbW9uLnRlc3RVaW50OEFycmF5KHB1YktleUJ5dGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IGJlIGEgVWludDhBcnJheScpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXlIZXggPSBuaXN0X3dlaWVyc3RyYXVzcy5uaXN0X3dlaWVyc3RyYXVzc19jb21tb24ucHViS2V5Qnl0ZXNUb0hleChwdWJLZXlCeXRlcyk7XG4gICAgY29uc3QgYnl0ZXNDb3VudCA9IHB1YmxpY0tleUhleC5sZW5ndGggLyAyO1xuICAgIC8vIHJhdyBwLTI1NiBrZXlcbiAgICBpZiAoYnl0ZXNDb3VudCA9PSA2NCkge1xuICAgICAgICByZXR1cm4gbmlzdF93ZWllcnN0cmF1c3MubmlzdF93ZWllcnN0cmF1c3NfY29tbW9uLnB1YmxpY0tleVRvWFkocHVibGljS2V5SGV4KTtcbiAgICB9XG4gICAgLy8gdW5jb21wcmVzc2VkIHAtMjU2IGtleSwgU0VDIGZvcm1hdFxuICAgIGlmIChieXRlc0NvdW50ID09IDY1KSB7XG4gICAgICAgIGlmIChwdWJsaWNLZXlIZXguc2xpY2UoMCwgMikgPT0gJzA0Jykge1xuICAgICAgICAgICAgY29uc3QgcHVibGljS2V5ID0gcHVibGljS2V5SGV4LnNsaWNlKDIpO1xuICAgICAgICAgICAgcmV0dXJuIG5pc3Rfd2VpZXJzdHJhdXNzLm5pc3Rfd2VpZXJzdHJhdXNzX2NvbW1vbi5wdWJsaWNLZXlUb1hZKHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29tcHJlc3NlZCBwLTI1NiBrZXksIFNFQyBmb3JtYXRcbiAgICBpZiAoYnl0ZXNDb3VudCA9PSAzMykge1xuICAgICAgICBpZiAocHVibGljS2V5SGV4LnNsaWNlKDAsIDIpID09ICcwMycgfHwgcHVibGljS2V5SGV4LnNsaWNlKDAsIDIpID09ICcwMicpIHtcbiAgICAgICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IHU4YS5mcm9tU3RyaW5nKHB1YmxpY0tleUhleCwgJ2Jhc2UxNicpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBuaXN0X3dlaWVyc3RyYXVzcy5zZWNwMjU2cjEuRUNQb2ludERlY29tcHJlc3MocHVibGljS2V5KTtcbiAgICAgICAgICAgIHJldHVybiBuaXN0X3dlaWVyc3RyYXVzcy5uaXN0X3dlaWVyc3RyYXVzc19jb21tb24ucHVibGljS2V5SW50VG9YWShwb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHB1YktleUJ5dGVzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp256r1.js\n");

/***/ }),

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp384r1.js":
/*!****************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/secp384r1.js ***!
  \****************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyToDidDoc: () => (/* binding */ keyToDidDoc),\n/* harmony export */   pubKeyBytesToXY: () => (/* binding */ pubKeyBytesToXY)\n/* harmony export */ });\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays */ \"(api)/../../packages/agent/node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nist-weierstrauss */ \"nist-weierstrauss\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__]);\nnist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Brent Shambaugh <brent.shambaugh@gmail.com>. 2021.\n\n\n/**\n * Constructs the document based on the method key\n */ function keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    const key = pubKeyBytesToXY(pubKeyBytes);\n    return {\n        id: did,\n        verificationMethod: [\n            {\n                id: keyId,\n                type: 'JsonWebKey2020',\n                controller: did,\n                publicKeyJwk: {\n                    kty: 'EC',\n                    crv: 'P-384',\n                    x: key.xm,\n                    y: key.ym\n                }\n            }\n        ],\n        authentication: [\n            keyId\n        ],\n        assertionMethod: [\n            keyId\n        ],\n        capabilityDelegation: [\n            keyId\n        ],\n        capabilityInvocation: [\n            keyId\n        ]\n    };\n}\n/**\n *\n * @param pubKeyBytes - public key as uncompressed byte array with no prefix (raw key),\n *  uncompressed with 0x04 prefix, or compressed with 0x02 prefix if even and 0x03 prefix if odd.\n * @returns point x,y with coordinates as multibase encoded base64urls\n *\n * See the the did:key specification: https://w3c-ccg.github.io/did-method-key/#p-384.\n * At present only raw p-384 keys are covered in the specification.\n * @throws TypeError: input cannot be null or undefined.\n * @throws Error: Unexpected pubKeyBytes\n * @internal\n */ function pubKeyBytesToXY(pubKeyBytes) {\n    if (!nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.testUint8Array(pubKeyBytes)) {\n        throw new TypeError('input must be a Uint8Array');\n    }\n    const publicKeyHex = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.pubKeyBytesToHex(pubKeyBytes);\n    const bytesCount = publicKeyHex.length / 2;\n    // raw p-384 key\n    if (bytesCount == 96) {\n        return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyToXY(publicKeyHex);\n    }\n    // uncompressed p-384 key, SEC format\n    if (bytesCount == 97) {\n        if (publicKeyHex.slice(0, 2) == '04') {\n            const publicKey = publicKeyHex.slice(2);\n            return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyToXY(publicKey);\n        }\n    }\n    // compressed p-384 key, SEC format\n    if (bytesCount == 49) {\n        if (publicKeyHex.slice(0, 2) == '03' || publicKeyHex.slice(0, 2) == '02') {\n            const publicKey = uint8arrays__WEBPACK_IMPORTED_MODULE_0__.fromString(publicKeyHex, 'base16');\n            const point = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.secp384r1.ECPointDecompress(publicKey);\n            return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyIntToXY(point);\n        }\n    }\n    throw new Error('Unexpected pubKeyBytes');\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMzg0cjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ21DO0FBQ29CO0FBQ3ZEO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsMkJBQTJCLFlBQVk7QUFDdkMscUJBQXFCLElBQUksR0FBRyxZQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsU0FBUyx1RUFBMEM7QUFDbkQ7QUFDQTtBQUNBLHlCQUF5Qix1RUFBMEM7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1RUFBMEM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQix1RUFBMEM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixtREFBYztBQUM1QywwQkFBMEIsd0RBQTJCO0FBQ3JELG1CQUFtQix1RUFBMEM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac2Fhcy9hZG1pbi1wb3J0YWwvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwMzg0cjEuanM/ZDkyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCcmVudCBTaGFtYmF1Z2ggPGJyZW50LnNoYW1iYXVnaEBnbWFpbC5jb20+LiAyMDIxLlxuaW1wb3J0ICogYXMgdThhIGZyb20gJ3VpbnQ4YXJyYXlzJztcbmltcG9ydCAqIGFzIG5pc3Rfd2VpZXJzdHJhdXNzIGZyb20gJ25pc3Qtd2VpZXJzdHJhdXNzJztcbi8qKlxuICogQ29uc3RydWN0cyB0aGUgZG9jdW1lbnQgYmFzZWQgb24gdGhlIG1ldGhvZCBrZXlcbiAqLyBleHBvcnQgZnVuY3Rpb24ga2V5VG9EaWREb2MocHViS2V5Qnl0ZXMsIGZpbmdlcnByaW50KSB7XG4gICAgY29uc3QgZGlkID0gYGRpZDprZXk6JHtmaW5nZXJwcmludH1gO1xuICAgIGNvbnN0IGtleUlkID0gYCR7ZGlkfSMke2ZpbmdlcnByaW50fWA7XG4gICAgY29uc3Qga2V5ID0gcHViS2V5Qnl0ZXNUb1hZKHB1YktleUJ5dGVzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBpZDogZGlkLFxuICAgICAgICB2ZXJpZmljYXRpb25NZXRob2Q6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDoga2V5SWQsXG4gICAgICAgICAgICAgICAgdHlwZTogJ0pzb25XZWJLZXkyMDIwJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBkaWQsXG4gICAgICAgICAgICAgICAgcHVibGljS2V5SndrOiB7XG4gICAgICAgICAgICAgICAgICAgIGt0eTogJ0VDJyxcbiAgICAgICAgICAgICAgICAgICAgY3J2OiAnUC0zODQnLFxuICAgICAgICAgICAgICAgICAgICB4OiBrZXkueG0sXG4gICAgICAgICAgICAgICAgICAgIHk6IGtleS55bVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYXV0aGVudGljYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGFzc2VydGlvbk1ldGhvZDogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXSxcbiAgICAgICAgY2FwYWJpbGl0eURlbGVnYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF0sXG4gICAgICAgIGNhcGFiaWxpdHlJbnZvY2F0aW9uOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdXG4gICAgfTtcbn1cbi8qKlxuICpcbiAqIEBwYXJhbSBwdWJLZXlCeXRlcyAtIHB1YmxpYyBrZXkgYXMgdW5jb21wcmVzc2VkIGJ5dGUgYXJyYXkgd2l0aCBubyBwcmVmaXggKHJhdyBrZXkpLFxuICogIHVuY29tcHJlc3NlZCB3aXRoIDB4MDQgcHJlZml4LCBvciBjb21wcmVzc2VkIHdpdGggMHgwMiBwcmVmaXggaWYgZXZlbiBhbmQgMHgwMyBwcmVmaXggaWYgb2RkLlxuICogQHJldHVybnMgcG9pbnQgeCx5IHdpdGggY29vcmRpbmF0ZXMgYXMgbXVsdGliYXNlIGVuY29kZWQgYmFzZTY0dXJsc1xuICpcbiAqIFNlZSB0aGUgdGhlIGRpZDprZXkgc3BlY2lmaWNhdGlvbjogaHR0cHM6Ly93M2MtY2NnLmdpdGh1Yi5pby9kaWQtbWV0aG9kLWtleS8jcC0zODQuXG4gKiBBdCBwcmVzZW50IG9ubHkgcmF3IHAtMzg0IGtleXMgYXJlIGNvdmVyZWQgaW4gdGhlIHNwZWNpZmljYXRpb24uXG4gKiBAdGhyb3dzIFR5cGVFcnJvcjogaW5wdXQgY2Fubm90IGJlIG51bGwgb3IgdW5kZWZpbmVkLlxuICogQHRocm93cyBFcnJvcjogVW5leHBlY3RlZCBwdWJLZXlCeXRlc1xuICogQGludGVybmFsXG4gKi8gZXhwb3J0IGZ1bmN0aW9uIHB1YktleUJ5dGVzVG9YWShwdWJLZXlCeXRlcykge1xuICAgIGlmICghbmlzdF93ZWllcnN0cmF1c3MubmlzdF93ZWllcnN0cmF1c3NfY29tbW9uLnRlc3RVaW50OEFycmF5KHB1YktleUJ5dGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IGJlIGEgVWludDhBcnJheScpO1xuICAgIH1cbiAgICBjb25zdCBwdWJsaWNLZXlIZXggPSBuaXN0X3dlaWVyc3RyYXVzcy5uaXN0X3dlaWVyc3RyYXVzc19jb21tb24ucHViS2V5Qnl0ZXNUb0hleChwdWJLZXlCeXRlcyk7XG4gICAgY29uc3QgYnl0ZXNDb3VudCA9IHB1YmxpY0tleUhleC5sZW5ndGggLyAyO1xuICAgIC8vIHJhdyBwLTM4NCBrZXlcbiAgICBpZiAoYnl0ZXNDb3VudCA9PSA5Nikge1xuICAgICAgICByZXR1cm4gbmlzdF93ZWllcnN0cmF1c3MubmlzdF93ZWllcnN0cmF1c3NfY29tbW9uLnB1YmxpY0tleVRvWFkocHVibGljS2V5SGV4KTtcbiAgICB9XG4gICAgLy8gdW5jb21wcmVzc2VkIHAtMzg0IGtleSwgU0VDIGZvcm1hdFxuICAgIGlmIChieXRlc0NvdW50ID09IDk3KSB7XG4gICAgICAgIGlmIChwdWJsaWNLZXlIZXguc2xpY2UoMCwgMikgPT0gJzA0Jykge1xuICAgICAgICAgICAgY29uc3QgcHVibGljS2V5ID0gcHVibGljS2V5SGV4LnNsaWNlKDIpO1xuICAgICAgICAgICAgcmV0dXJuIG5pc3Rfd2VpZXJzdHJhdXNzLm5pc3Rfd2VpZXJzdHJhdXNzX2NvbW1vbi5wdWJsaWNLZXlUb1hZKHB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29tcHJlc3NlZCBwLTM4NCBrZXksIFNFQyBmb3JtYXRcbiAgICBpZiAoYnl0ZXNDb3VudCA9PSA0OSkge1xuICAgICAgICBpZiAocHVibGljS2V5SGV4LnNsaWNlKDAsIDIpID09ICcwMycgfHwgcHVibGljS2V5SGV4LnNsaWNlKDAsIDIpID09ICcwMicpIHtcbiAgICAgICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IHU4YS5mcm9tU3RyaW5nKHB1YmxpY0tleUhleCwgJ2Jhc2UxNicpO1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBuaXN0X3dlaWVyc3RyYXVzcy5zZWNwMzg0cjEuRUNQb2ludERlY29tcHJlc3MocHVibGljS2V5KTtcbiAgICAgICAgICAgIHJldHVybiBuaXN0X3dlaWVyc3RyYXVzcy5uaXN0X3dlaWVyc3RyYXVzc19jb21tb24ucHVibGljS2V5SW50VG9YWShwb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHB1YktleUJ5dGVzJyk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp384r1.js\n");

/***/ }),

/***/ "(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp521r1.js":
/*!****************************************************************************!*\
  !*** ../../packages/agent/node_modules/key-did-resolver/dist/secp521r1.js ***!
  \****************************************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyToDidDoc: () => (/* binding */ keyToDidDoc),\n/* harmony export */   pubKeyBytesToXY: () => (/* binding */ pubKeyBytesToXY)\n/* harmony export */ });\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uint8arrays */ \"(api)/../../packages/agent/node_modules/uint8arrays/dist/src/index.js\");\n/* harmony import */ var nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! nist-weierstrauss */ \"nist-weierstrauss\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__]);\nnist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// Brent Shambaugh <brent.shambaugh@gmail.com>. 2021.\n\n\n/**\n * Constructs the document based on the method key\n */ function keyToDidDoc(pubKeyBytes, fingerprint) {\n    const did = `did:key:${fingerprint}`;\n    const keyId = `${did}#${fingerprint}`;\n    const key = pubKeyBytesToXY(pubKeyBytes);\n    return {\n        id: did,\n        verificationMethod: [\n            {\n                id: keyId,\n                type: 'JsonWebKey2020',\n                controller: did,\n                publicKeyJwk: {\n                    kty: 'EC',\n                    crv: 'P-521',\n                    x: key.xm,\n                    y: key.ym\n                }\n            }\n        ],\n        authentication: [\n            keyId\n        ],\n        assertionMethod: [\n            keyId\n        ],\n        capabilityDelegation: [\n            keyId\n        ],\n        capabilityInvocation: [\n            keyId\n        ]\n    };\n}\n/**\n *\n * @param pubKeyBytes - public key as compressed with 0x02 prefix if even and 0x03 prefix if odd.\n * @returns point x,y with coordinates as multibase encoded base64urls\n *\n * See the the did:key specification: https://w3c-ccg.github.io/did-method-key/#p-521.\n * For compression see: https://tools.ietf.org/id/draft-jivsov-ecc-compact-05.html#rfc.section.3\n * @throws TypeError: input cannot be null or undefined.\n * @throws Error: Unexpected pubKeyBytes\n * @internal\n */ function pubKeyBytesToXY(pubKeyBytes) {\n    if (!nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.testUint8Array(pubKeyBytes)) {\n        throw new TypeError('input must be a Uint8Array');\n    }\n    const publicKeyHex = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.pubKeyBytesToHex(pubKeyBytes);\n    // compressed p-521 key, SEC format\n    // publicKeyHex.length / 2.0 = 67.0 bytes\n    if (132 <= publicKeyHex.length && publicKeyHex.length <= 134) {\n        if (publicKeyHex.slice(0, 2) == '03' || publicKeyHex.slice(0, 2) == '02') {\n            const publicKey = uint8arrays__WEBPACK_IMPORTED_MODULE_0__.fromString(publicKeyHex, 'base16');\n            const point = nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.secp521r1.ECPointDecompress(publicKey);\n            return nist_weierstrauss__WEBPACK_IMPORTED_MODULE_1__.nist_weierstrauss_common.publicKeyIntToXY(point);\n        }\n    }\n    throw new Error('Unexpected pubKeyBytes');\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi4vLi4vcGFja2FnZXMvYWdlbnQvbm9kZV9tb2R1bGVzL2tleS1kaWQtcmVzb2x2ZXIvZGlzdC9zZWNwNTIxcjEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ21DO0FBQ29CO0FBQ3ZEO0FBQ0E7QUFDQSxJQUFXO0FBQ1gsMkJBQTJCLFlBQVk7QUFDdkMscUJBQXFCLElBQUksR0FBRyxZQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBVztBQUNYLFNBQVMsdUVBQTBDO0FBQ25EO0FBQ0E7QUFDQSx5QkFBeUIsdUVBQTBDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG1EQUFjO0FBQzVDLDBCQUEwQix3REFBMkI7QUFDckQsbUJBQW1CLHVFQUEwQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzYWFzL2FkbWluLXBvcnRhbC8uLi8uLi9wYWNrYWdlcy9hZ2VudC9ub2RlX21vZHVsZXMva2V5LWRpZC1yZXNvbHZlci9kaXN0L3NlY3A1MjFyMS5qcz80MWQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEJyZW50IFNoYW1iYXVnaCA8YnJlbnQuc2hhbWJhdWdoQGdtYWlsLmNvbT4uIDIwMjEuXG5pbXBvcnQgKiBhcyB1OGEgZnJvbSAndWludDhhcnJheXMnO1xuaW1wb3J0ICogYXMgbmlzdF93ZWllcnN0cmF1c3MgZnJvbSAnbmlzdC13ZWllcnN0cmF1c3MnO1xuLyoqXG4gKiBDb25zdHJ1Y3RzIHRoZSBkb2N1bWVudCBiYXNlZCBvbiB0aGUgbWV0aG9kIGtleVxuICovIGV4cG9ydCBmdW5jdGlvbiBrZXlUb0RpZERvYyhwdWJLZXlCeXRlcywgZmluZ2VycHJpbnQpIHtcbiAgICBjb25zdCBkaWQgPSBgZGlkOmtleToke2ZpbmdlcnByaW50fWA7XG4gICAgY29uc3Qga2V5SWQgPSBgJHtkaWR9IyR7ZmluZ2VycHJpbnR9YDtcbiAgICBjb25zdCBrZXkgPSBwdWJLZXlCeXRlc1RvWFkocHViS2V5Qnl0ZXMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkOiBkaWQsXG4gICAgICAgIHZlcmlmaWNhdGlvbk1ldGhvZDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiBrZXlJZCxcbiAgICAgICAgICAgICAgICB0eXBlOiAnSnNvbldlYktleTIwMjAnLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IGRpZCxcbiAgICAgICAgICAgICAgICBwdWJsaWNLZXlKd2s6IHtcbiAgICAgICAgICAgICAgICAgICAga3R5OiAnRUMnLFxuICAgICAgICAgICAgICAgICAgICBjcnY6ICdQLTUyMScsXG4gICAgICAgICAgICAgICAgICAgIHg6IGtleS54bSxcbiAgICAgICAgICAgICAgICAgICAgeToga2V5LnltXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhdXRoZW50aWNhdGlvbjogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXSxcbiAgICAgICAgYXNzZXJ0aW9uTWV0aG9kOiBbXG4gICAgICAgICAgICBrZXlJZFxuICAgICAgICBdLFxuICAgICAgICBjYXBhYmlsaXR5RGVsZWdhdGlvbjogW1xuICAgICAgICAgICAga2V5SWRcbiAgICAgICAgXSxcbiAgICAgICAgY2FwYWJpbGl0eUludm9jYXRpb246IFtcbiAgICAgICAgICAgIGtleUlkXG4gICAgICAgIF1cbiAgICB9O1xufVxuLyoqXG4gKlxuICogQHBhcmFtIHB1YktleUJ5dGVzIC0gcHVibGljIGtleSBhcyBjb21wcmVzc2VkIHdpdGggMHgwMiBwcmVmaXggaWYgZXZlbiBhbmQgMHgwMyBwcmVmaXggaWYgb2RkLlxuICogQHJldHVybnMgcG9pbnQgeCx5IHdpdGggY29vcmRpbmF0ZXMgYXMgbXVsdGliYXNlIGVuY29kZWQgYmFzZTY0dXJsc1xuICpcbiAqIFNlZSB0aGUgdGhlIGRpZDprZXkgc3BlY2lmaWNhdGlvbjogaHR0cHM6Ly93M2MtY2NnLmdpdGh1Yi5pby9kaWQtbWV0aG9kLWtleS8jcC01MjEuXG4gKiBGb3IgY29tcHJlc3Npb24gc2VlOiBodHRwczovL3Rvb2xzLmlldGYub3JnL2lkL2RyYWZ0LWppdnNvdi1lY2MtY29tcGFjdC0wNS5odG1sI3JmYy5zZWN0aW9uLjNcbiAqIEB0aHJvd3MgVHlwZUVycm9yOiBpbnB1dCBjYW5ub3QgYmUgbnVsbCBvciB1bmRlZmluZWQuXG4gKiBAdGhyb3dzIEVycm9yOiBVbmV4cGVjdGVkIHB1YktleUJ5dGVzXG4gKiBAaW50ZXJuYWxcbiAqLyBleHBvcnQgZnVuY3Rpb24gcHViS2V5Qnl0ZXNUb1hZKHB1YktleUJ5dGVzKSB7XG4gICAgaWYgKCFuaXN0X3dlaWVyc3RyYXVzcy5uaXN0X3dlaWVyc3RyYXVzc19jb21tb24udGVzdFVpbnQ4QXJyYXkocHViS2V5Qnl0ZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3QgYmUgYSBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHB1YmxpY0tleUhleCA9IG5pc3Rfd2VpZXJzdHJhdXNzLm5pc3Rfd2VpZXJzdHJhdXNzX2NvbW1vbi5wdWJLZXlCeXRlc1RvSGV4KHB1YktleUJ5dGVzKTtcbiAgICAvLyBjb21wcmVzc2VkIHAtNTIxIGtleSwgU0VDIGZvcm1hdFxuICAgIC8vIHB1YmxpY0tleUhleC5sZW5ndGggLyAyLjAgPSA2Ny4wIGJ5dGVzXG4gICAgaWYgKDEzMiA8PSBwdWJsaWNLZXlIZXgubGVuZ3RoICYmIHB1YmxpY0tleUhleC5sZW5ndGggPD0gMTM0KSB7XG4gICAgICAgIGlmIChwdWJsaWNLZXlIZXguc2xpY2UoMCwgMikgPT0gJzAzJyB8fCBwdWJsaWNLZXlIZXguc2xpY2UoMCwgMikgPT0gJzAyJykge1xuICAgICAgICAgICAgY29uc3QgcHVibGljS2V5ID0gdThhLmZyb21TdHJpbmcocHVibGljS2V5SGV4LCAnYmFzZTE2Jyk7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IG5pc3Rfd2VpZXJzdHJhdXNzLnNlY3A1MjFyMS5FQ1BvaW50RGVjb21wcmVzcyhwdWJsaWNLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIG5pc3Rfd2VpZXJzdHJhdXNzLm5pc3Rfd2VpZXJzdHJhdXNzX2NvbW1vbi5wdWJsaWNLZXlJbnRUb1hZKHBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgcHViS2V5Qnl0ZXMnKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/../../packages/agent/node_modules/key-did-resolver/dist/secp521r1.js\n");

/***/ })

};
;