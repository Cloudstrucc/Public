// AI-Powered E-commerce Platform - Prisma Schema (ARM64 + OpenSSL 3.0 Compatible)
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("users")
}

model Product {
  id               String   @id @default(cuid())
  sourceProductId  String
  sourceSite       String
  title            String
  description      String?
  sourcePrice      Decimal
  marketPrice      Decimal
  currency         String   @default("CAD")
  images           String[] @default([])
  category         String
  isActive         Boolean  @default(true)
  availability     Boolean  @default(true)
  supplierInfo     Json     @default("{}")
  specifications   Json     @default("{}")
  shippingInfo     Json     @default("{}")
  reviewsCount     Int      @default(0)
  rating           Decimal  @default(0)
  inventoryLevel   String   @default("In Stock")
  scrapedAt        DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@unique([sourceProductId, sourceSite])
  @@map("products")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  customerEmail   String
  customerName    String?
  totalAmount     Decimal
  currency        String      @default("CAD")
  status          OrderStatus @default(PENDING)
  paymentIntentId String?
  shippingAddress Json        @default("{}")
  billingAddress  Json        @default("{}")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal
  totalPrice Decimal

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
