@page "/"
@using EcommerceBlazor.Services
@inject IProductApiService ProductService

<PageTitle>AI E-commerce Store - Home</PageTitle>

<!-- Hero Section -->
<section class="hero-section">
    <div class="container px-4 px-lg-5 my-5">
        <div class="text-center">
            <h1 class="display-4 fw-bolder">ü§ñ AI-Powered E-commerce Platform</h1>
            <p class="lead fw-normal mb-3">
                Discover amazing products sourced automatically by our AI agent from trusted suppliers worldwide
            </p>
            <div class="d-flex justify-content-center mb-3">
                <span class="badge badge-ai me-2">‚ú® AI-Powered</span>
                <span class="badge bg-success me-2">üêò PostgreSQL</span>
                <span class="badge bg-info">üá®üá¶ Canadian Market</span>
            </div>
            <a class="btn btn-light btn-lg" href="#products">Shop Now</a>
        </div>
    </div>
</section>

<!-- Products Section -->
<section class="py-5" id="products">
    <div class="container px-4 px-lg-5 mt-5">
        
        <!-- AI Status Banner -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-info d-flex align-items-center" role="alert">
                    <i class="bi-robot me-2"></i>
                    <div>
                        <strong>AI Agent Status:</strong> 
                        @if (loading)
                        {
                            <span class="ai-indicator">Connecting to AI systems...</span>
                            <div class="loading-spinner ms-2"></div>
                        }
                        else if (products.Any())
                        {
                            <span class="text-success">‚úÖ Active - Found @products.Count products in database</span>
                        }
                        else
                        {
                            <span class="text-warning">ü§ñ AI agent is importing products (runs every 15 minutes)</span>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (loading)
        {
            <!-- Loading State -->
            <div class="text-center py-5">
                <div class="loading-spinner mb-3"></div>
                <h4>Loading Products from PostgreSQL...</h4>
                <p class="text-muted">Our AI agent is fetching the latest products for you</p>
            </div>
        }
        else if (products.Any())
        {
            <!-- Products Grid -->
            <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-content-center">
                @foreach (var product in products)
                {
                    <div class="col mb-5">
                        <div class="card h-100">
                            <!-- Sale badge -->
                            @if (product.MarketPrice < product.SourcePrice * 1.5m)
                            {
                                <div class="badge bg-danger text-white position-absolute" style="top: 0.5rem; right: 0.5rem">
                                    AI Priced
                                </div>
                            }
                            
                            <!-- Product image -->
                            <img class="card-img-top product-image" 
                                 src="@(product.Images.FirstOrDefault() ?? "https://via.placeholder.com/450x300?text=No+Image")" 
                                 alt="@product.Title" 
                                 loading="lazy" />
                            
                            <!-- Product details -->
                            <div class="card-body p-4">
                                <div class="text-center">
                                    <!-- Product name -->
                                    <h5 class="fw-bolder">@product.Title</h5>
                                    
                                    <!-- Product category -->
                                    <span class="badge bg-secondary mb-2">@product.Category</span>
                                    
                                    <!-- Product reviews -->
                                    <div class="d-flex justify-content-center small text-warning mb-2">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            @if (i <= (int)product.Rating)
                                            {
                                                <div class="bi-star-fill"></div>
                                            }
                                            else
                                            {
                                                <div class="bi-star"></div>
                                            }
                                        }
                                        <span class="text-muted ms-1">(@product.ReviewsCount)</span>
                                    </div>
                                    
                                    <!-- Product price -->
                                    <div class="price">
                                        $@product.MarketPrice.ToString("F2") CAD
                                    </div>
                                    
                                    @if (product.SourcePrice != product.MarketPrice)
                                    {
                                        <div class="text-muted text-decoration-line-through small">
                                            Was: $@product.SourcePrice.ToString("F2")
                                        </div>
                                    }
                                    
                                    <!-- Availability -->
                                    <div class="mt-2">
                                        @if (product.Availability)
                                        {
                                            <span class="badge bg-success">‚úÖ @product.InventoryLevel</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">‚ùå Out of Stock</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Product actions -->
                            <div class="card-footer p-4 pt-0 border-top-0 bg-transparent">
                                <div class="text-center">
                                    @if (product.Availability)
                                    {
                                        <button class="btn btn-success mt-auto" onclick="addToCart(@product.Id)">
                                            <i class="bi-cart-plus me-1"></i>Add to Cart
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary mt-auto" disabled>
                                            <i class="bi-x-circle me-1"></i>Out of Stock
                                        </button>
                                    }
                                    <button class="btn btn-outline-primary mt-auto ms-1" onclick="viewProduct(@product.Id)">
                                        <i class="bi-eye me-1"></i>View
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- No Products State -->
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="bi-robot" style="font-size: 4rem; color: #6c757d;"></i>
                </div>
                <h3>ü§ñ AI Agent is Working Hard!</h3>
                <p class="lead text-muted mb-4">
                    Our artificial intelligence is currently importing products from suppliers around the world.
                </p>
                <div class="row justify-content-center">
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">üîÑ What's Happening?</h5>
                                <ul class="list-unstyled text-start">
                                    <li>‚úÖ PostgreSQL database is ready</li>
                                    <li>‚úÖ .NET API is connected</li>
                                    <li>ü§ñ Python AI agent is scraping products</li>
                                    <li>‚è∞ New products imported every 15 minutes</li>
                                </ul>
                                <hr>
                                <p class="mb-0">
                                    <strong>Check back in a few minutes</strong> or watch the logs: 
                                    <code>make logs-agent</code>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</section>

<script>
    function addToCart(productId) {
        alert(`Added product ${productId} to cart! üõí\n(Cart functionality coming soon)`);
    }
    
    function viewProduct(productId) {
        alert(`Viewing product ${productId} üëÅÔ∏è\n(Product details coming soon)`);
    }
    
    // Auto-refresh products every 5 minutes if no products found
    setInterval(function() {
        if (!window.blazorCulture) {
            location.reload();
        }
    }, 300000);
</script>

@code {
    private List<ProductDto> products = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(1000); // Brief delay for better UX
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}
